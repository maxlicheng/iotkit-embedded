--- iotkit-embedded/src/mqtt/examples/mqtt_example.c	2019-06-13 20:46:41.404732993 +0800
+++ iotkit-embedded-test/src/mqtt/examples/mqtt_example.c	2019-06-14 22:42:47.884960652 +0800
@@ -1,5 +1,24 @@
+/********************************************************************************************************************************
+** 文件名		:002-mqtt_example.c
+** 作者			:maxlicheng<licheng.chn@outlook.com>
+** 作者github		:https://github.com/maxlicheng
+** 作者博客		:https://www.maxlicheng.com/	
+** 生成日期		:2019-06-14
+** 描述			:mqtt示例，适用于嵌入式Linux开发板，
+**					可通过阿里云物联网平台控制LED的亮灭，
+**					并将云平台发送的字符串写入到txt文件中，
+**					同时上报光亮度（adc电压值） 和 随机产生的温湿度数据。
+**********************************************************************************************************************************/
 #include "dev_sign_api.h"
 #include "mqtt_api.h"
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <cJSON.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
 
 char DEMO_PRODUCT_KEY[IOTX_PRODUCT_KEY_LEN + 1] = {0};
 char DEMO_DEVICE_NAME[IOTX_DEVICE_NAME_LEN + 1] = {0};
@@ -23,7 +42,17 @@
 
 void example_message_arrive(void *pcontext, void *pclient, iotx_mqtt_event_msg_pt msg)
 {
-    iotx_mqtt_topic_info_t     *topic_info = (iotx_mqtt_topic_info_pt) msg->msg;
+	int fd;
+	FILE *fpw = NULL;
+	const char *leds = "/dev/leds";
+	const char *files = "/tmp/data.txt";
+	char *fbuf = NULL;
+	cJSON *json = NULL;
+	cJSON *json_params = NULL;
+	cJSON *json_id = NULL;
+	cJSON *json_led = NULL;
+	cJSON *json_display = NULL;
+    	iotx_mqtt_topic_info_t     *topic_info = (iotx_mqtt_topic_info_pt) msg->msg;
 
     switch (msg->event_type) {
         case IOTX_MQTT_EVENT_PUBLISH_RECEIVED:
@@ -32,6 +61,57 @@
             EXAMPLE_TRACE("Topic  : %.*s", topic_info->topic_len, topic_info->ptopic);
             EXAMPLE_TRACE("Payload: %.*s", topic_info->payload_len, topic_info->payload);
             EXAMPLE_TRACE("\n");
+		json = cJSON_Parse(topic_info->payload);			//解析数据包
+		if (!json)  
+		{  
+			HAL_Printf("Error before: [%s]\r\n",cJSON_GetErrorPtr());  
+		} 
+		else
+		{
+			json_id = cJSON_GetObjectItem(json , "id"); 
+			if(json_id->type == cJSON_String)
+			{
+				HAL_Printf("id:%s\r\n", json_id->valuestring);  
+			}
+			json_params = cJSON_GetObjectItem(json , "params");  
+			if(json_params)  
+			{  
+				if(cJSON_GetObjectItem(json_params, "led"))
+				{
+					json_led  = cJSON_GetObjectItem(json_params, "led");
+					if(json_led->type == cJSON_Number)
+					{
+						HAL_Printf("LED:%d\r\n", json_led->valueint);  
+						if((fd = open(leds, O_RDWR|O_NOCTTY|O_NDELAY))<0)		
+							HAL_Printf("open %s failed\n",leds);   	
+						else{			
+							ioctl(fd,json_led->valueint, 0);			
+							HAL_Printf("ioctl %s success, led %d\n",leds,json_led->valueint);		
+						}	
+						close(fd);
+					}
+				}
+				if(cJSON_GetObjectItem(json_params, "display"))
+				{
+					json_display = cJSON_GetObjectItem(json_params, "display");
+					if (json_display->type == cJSON_String)  
+					{  
+						fbuf = HAL_Malloc(200);
+						memset(fbuf, 0, 200);
+						sprintf(fbuf, "display:%s\r\n",  json_display->valuestring);
+						HAL_Printf("%s", fbuf);  	
+						fpw = fopen(files, "a");
+						if(fpw != NULL)
+						{
+							fprintf(fpw, fbuf);
+						}
+						HAL_Free(fbuf);
+						fclose(fpw);
+					}  
+				}
+			} 
+		}
+		cJSON_Delete(json);
             break;
         default:
             break;
@@ -41,7 +121,7 @@
 int example_subscribe(void *handle)
 {
     int res = 0;
-    const char *fmt = "/%s/%s/user/get";
+    const char *fmt = "/sys/%s/%s/thing/service/property/set"	;
     char *topic = NULL;
     int topic_len = 0;
 
@@ -67,30 +147,61 @@
 
 int example_publish(void *handle)
 {
-    int             res = 0;
-    const char     *fmt = "/%s/%s/user/get";
-    char           *topic = NULL;
-    int             topic_len = 0;
-    char           *payload = "{\"message\":\"hello!\"}";
-
-    topic_len = strlen(fmt) + strlen(DEMO_PRODUCT_KEY) + strlen(DEMO_DEVICE_NAME) + 1;
-    topic = HAL_Malloc(topic_len);
-    if (topic == NULL) {
-        EXAMPLE_TRACE("memory not enough");
-        return -1;
-    }
-    memset(topic, 0, topic_len);
-    HAL_Snprintf(topic, topic_len, fmt, DEMO_PRODUCT_KEY, DEMO_DEVICE_NAME);
-
-    res = IOT_MQTT_Publish_Simple(0, topic, IOTX_MQTT_QOS0, payload, strlen(payload));
-    if (res < 0) {
-        EXAMPLE_TRACE("publish failed, res = %d", res);
-        HAL_Free(topic);
-        return -1;
-    }
-
-    HAL_Free(topic);
-    return 0;
+    	int res 		= 0;
+	float temp 	= 0;
+	float humid 	= 0;
+	const char *fmt 	= "/sys/%s/%s/thing/event/property/post";
+    	char  *topic 		= NULL;
+    	int      topic_len 	= 0;
+    	char  *payload 	= NULL;
+
+	int fd = 0;
+	int len = 0, adc_val = 0;
+	const char *adc = "/dev/adc";
+	char *buffer = NULL;
+
+	buffer = HAL_Malloc(512);
+	memset(buffer, 0, 512);
+		
+	payload = HAL_Malloc(200);
+	memset(payload, 0, 200);
+	
+	temp = 24.7+rand()%10+1;
+	humid = 54.8+rand()%10+1;
+
+	if((fd = open(adc, O_RDWR|O_NOCTTY|O_NDELAY))>0)
+	{
+		if(read(fd, buffer, 10))
+		{
+			adc_val = atoi(buffer);
+			adc_val = (int)(adc_val*10000/4095);
+		}
+	}
+	
+	close(fd);
+	
+	sprintf(payload,"{\"params\":{\"CurrentTemperature\":%0.1f,\"RelativeHumidity\":%0.1f,\"LightLuxValue\":%d},\"method\":\"thing.event.property.post\"}",temp, humid, adc_val);
+	
+    	topic_len = strlen(fmt) + strlen(DEMO_PRODUCT_KEY) + strlen(DEMO_DEVICE_NAME) + 1;
+    	topic = HAL_Malloc(topic_len);
+    	if (topic == NULL) {
+        	EXAMPLE_TRACE("memory not enough");
+        	return -1;
+    	}
+    	memset(topic, 0, topic_len);
+    	HAL_Snprintf(topic, topic_len, fmt, DEMO_PRODUCT_KEY, DEMO_DEVICE_NAME);
+
+    	res = IOT_MQTT_Publish_Simple(0, topic, IOTX_MQTT_QOS0, payload, strlen(payload));
+    	if (res < 0) {
+        	EXAMPLE_TRACE("publish failed, res = %d", res);
+        	HAL_Free(topic);
+        	return -1;
+    	}
+
+    	HAL_Free(topic);
+	HAL_Free(payload);
+	HAL_Free(buffer);
+    	return 0;
 }
 
 void example_event_handle(void *pcontext, void *pclient, iotx_mqtt_event_msg_pt msg)
@@ -221,6 +332,8 @@
      * default value is NULL, which means PUB/SUB event won't be exposed.
      *
      */
+     
+	
     mqtt_params.handle_event.h_fp = example_event_handle;
 
     pclient = IOT_MQTT_Construct(&mqtt_params);
@@ -235,6 +348,8 @@
         return -1;
     }
 
+	HAL_Printf("\r\ncJSON Version: %s\r\n", cJSON_Version());
+
     while (1) {
         if (0 == loop_cnt % 20) {
             example_publish(pclient);
